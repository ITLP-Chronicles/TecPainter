#include "bezier.h"
#include "linea.h"
#include <vector>

Punto* GetLinearInterpolation(Punto* p1, Punto* p2, int actualT){
    int newX = (1 - actualT) * p1->x + actualT * p1->x;
    int newY = (1 - actualT) * p1->y + actualT * p2->y;
    return new Punto(newX, newY);
}

Bezier::Bezier(std::vector<Punto*>* nuevosPuntosControl, int stepsPorDefecto){
    this->puntosDeControl = nuevosPuntosControl;
    this->pasos = stepsPorDefecto;
    this->puntosDeCurva = new std::vector<Punto*>();
    
    //Con step nos referimos a la cantidad de puntos a hacerse y el no. de punto actual que se está calculando.
    for (int step = 0; step < stepsPorDefecto; step++){
        auto actualIterPoints = this->puntosDeControl;
        double t = step / stepsPorDefecto; //Aquí ya se está obteniendo el valor correspondiente de t en este step

        while (actualIterPoints->size() > 1) {
            auto temp = new std::vector<Punto*>();

            for (int i = 0; actualIterPoints->size() -1; i++){
                temp->push_back(
                    GetLinearInterpolation(actualIterPoints->at(i), actualIterPoints->at(i+1), t)
                );
            }
            actualIterPoints = temp;
        }
        
        //Aquí obtendríamos el punto resultante de todo el cálculo solo en este valor de t, lo agregamos al  arreglo de curvas
        puntosDeCurva->push_back(actualIterPoints->at(0));
    }
}
